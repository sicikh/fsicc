Name =
    '#ident'

Attr =
    '#attribute'

TypeVar =
    '#ident'

Path =
  (qualifier:Path '.')? segment:PathSegment

PathSegment =
    Name TypeArgList?

TypeArgList =
    '[' type_args:(Type (',' Type)*)? ']'

ConstraintList =
     '[' constraints:(Constraint (',' Constraint)* ','?)? ']'

Constraint =
    class:Path? type_vars:(TypeVar TypeVar*)

Operator =
    '*'

//*************************//
//          Items          //
//*************************//

SourceFile =
    Preamble? Item*

Preamble =
    'module' Path

Item =
    Module
|   LetDecl
|   Import
|   AttrDef
|   Class
|   AdtList
|   Where

Module =
    Attr* 'module' Name '=' Item*

LetDecl =
    Attr* 'let' 'rec'? LetOp? Pat ConstraintList? ParamList? (':' Type)? ('=' Expr)?

LetOp =
    '(' Operator ')'

ParamList =
    Param Param*

Param =
    Pat
|  '(' Pat (':' Type)? ')'

Import =
    Attr* 'import' Path

AttrDef =
    Attr* 'attribute' Name

Class =
    Attr* 'class' Name ConstraintList? type_vars:(TypeVar TypeVar*) '=' functions:LetDecl*

AdtList =
    Adt ('and' Adt)*

Adt =
    Union
|   Value
|   Alias

Union =
    Attr* 'union' Name ConstraintList? '=' '|'? cases:(Path ('|' Path)*)

Value =
    Attr* 'value' Name ConstraintList? ('(' fields:(ValueField ('*' ValueField)*) ')')?

ValueField =
    (Name ':')? Type

Alias =
    Attr* 'alias' Name ConstraintList? '=' Type

Where =
    Attr* 'where' Name ConstraintList? Path '=' functions:LetDecl*

//****************************//
//        Expressions         //
//****************************//

Expr =
    LetExpr
|   BinExpr
|   UnaryExpr
|   SeqExpr
|   AscExpr
|   ParenExpr
|   TupleExpr
|   AppExpr
|   IfExpr
|   MatchExpr
|   Literal

LetExpr =
    LetDecl 'in'? body:Expr

UnaryExpr =
    op:Operator
    Expr

BinExpr =
    lhs:Expr
    op:Operator
    rhs:Expr

SeqExpr =
    fst:Expr snd:Expr

AscExpr =
    Expr ':' Type

ParenExpr =
    '(' Expr ')'

TupleExpr =
    Expr (',' Expr)*

AppExpr =
    fun:Expr arg:Expr

IfExpr =
    'if' condition:Expr 'then' then_branch:Expr ('else' else_branch:Expr)?

MatchExpr =
    'match' Expr 'with' '|'? cases:(MatchCase ('|' MatchCase)*)

MatchCase =
    Pat guard:MatchGuard? '->' Expr

MatchGuard =
    'when' condition:Expr

Literal =
    value:(
        '@int_number' | '@float_number'
    |   '@string' | '@f_string' | '@char'
    |   'true' | 'false'
    )

//****************************//
//           Types            //
//****************************//

Type =
    PathType
|   FnType
|   TupleType
|   ParenType
|   ConstraintType
|   InferType

PathType =
    Path

FnType =
    arg:Type '->' ret:Type

TupleType =
    fields:(Type ('*' Type)*)

ParenType =
    '(' Type ')'

ConstraintType =
    ConstraintList Type

InferType =
    '_'

//************************//
//        Patterns        //
//************************//

Pat =
    ParenPat
|   TuplePat
|   ConsPat
|   WildcardPat
|   LiteralPat
|   IdentPat
|   RecordPat
|   OrPat
|   TupleValuePat
|   AscPat

ParenPat =
    '(' Pat ')'

TuplePat =
    fields:(Pat (',' Pat)*)

ConsPat =
    head:Pat '::' rest:Pat

WildcardPat =
    '_'

LiteralPat =
    Literal

IdentPat =
    (Pat 'as')? Name

RecordPat =
    '{' fields:(RecordPatField (';' RecordPatField)* ';'?)? '}'

RecordPatField =
    (Name '=')? Pat

// OnlyRecordPat =
//    '{|' fields:(RecordPatField (',' RecordPatField)* ','?)? '|}'

OrPat =
    '|'? (Pat ('|' Pat)*)

TupleValuePat =
    Path '(' fields:(Pat (',' Pat)* ','?)? ')'

AscPat =
    Pat ':' Type
